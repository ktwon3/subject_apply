* 함수 설명은 function specification.txt에
* sub__name.txt : 과목 별 이름
* subject_block.txt : 각 과목이 어떤 블럭에 속해있는지 알려주는 txt 파일
* students.txt : Student의 인스턴스들 들어있는 txt 파일


시뮬 설계
1. 4단위, 2단위 일반화 : 수강신청 시간표에 나온 대로 4A, 4B, 2A로 하면 가능. 다만 2단위와 4단위 동시 신청 가능한 구간은 조정 필요함 (+과제연구)
공강 : 제한인원이 전교생인 과목 (제한 x)

2. 4단위만 있는 곳에서는 과목이 9~10, 모든 사람이 그 시간에 과목을 들어야 하므로 (전교생) / 9,10 = 한 분반의 평균 학생 수 => 20~23

3. 1트랙 : (4*7) + (2*2) + 2(공강) = 34
   2트랙 ; (4*6) + (2*3) + 4(공강) = 34
   이때 공강 2단위가 과제연구 2단위로 대체 가능


<단위수>
1. 중국어 문법 : 1
2. 일본어 문법 : 1
3. 선대 : 1
4. 윤사 : 1
5. 드로잉 : 1
6. 지1 : 1
7. 물2 : 1
8. 앱바 : 2
9. 앱통 : 2
10. 화1 : 2
11. 앱미 : 2
12. 세계사 : 1
13. 음악연주 : 2
14. 언매 : 2
15. 정법 : 2
16. 영미 : 2
17. AP 화학 : 4
18. 문학 : 6(7)
19. 기하 : 5(6)
20. 수1 : 6(8)
21. 심영독 : 4
22. 앱물 : 3(4)
23. 생1 : 3
24. 심미적 : 3
=> 총 58
전체 학생수 200명이라 가정
분반당 인원수 : 21명
공강 인원 : 21명 * 2번 = 42  <= 아니긴 하지만 (블럭 6개 기준) 5,6 블록에만 공강이 열릴 때 모든 블록에 공강이 열릴때보다 더 pick이 더 잘 됨 > 5,6블록에 들어갈 사람들이 1,2,3,4로 흩어져 5,6에서 미아되는 사람이 많은걸로 추측됨

과목 배정 : 과목 중복 x, 한 블록에 한 과목만, 분반 고려는 하되 저장은 x

첫번째 시뮬에서는 과목에 대한 정보가 많이 필요하지 않아 리스트로 정리인덱스 순서로4A2, 4B2, 4C2, 4D2, 4F2, 4H2인스턴스210개를all_student에 저장

블록 1~6 : 블록 중복이 없는 4단위
블록 7, 8 : 블록 중복이 있는 4단위
블록 9 : 블록 중복이 없는 2단위
블록 10~13 : 블록 중복이 있는 2단위
1: 4A2
2: 4B2
3: 4C2
4: 4D2
5: 4F2
6: 4H2
7: 4E2
8: 4G2
9: 2A2
10: 2B2
11: 2C2
12: 2D2
13: 2E2

구현 해야 할 것
공강 마지막에 수강신청 - 해결
블록 중복 고려 - 해결
트랙 고려 - 해결
고정 과목 (수1과 운건) - 해결
우선 순위 <- 선호하는 과목 순서 - 해결
과목을 순서에 따라 신청하도록 해야함 (유전 알고리즘을 사용하기 위해선)
(사람) 신청 순서 고정 (유전 알고리즘 제대로 적용하기 위함)
현실 반영을 위해선 각각의 학생이 생각하고 있던 분반도 신청에 고려되도록 해야함 - 해결
분반 두 개가 한 블록에 있을 시 첫 번째 분반이 먼저 다 차버리는 문제 존재 <- 희망 과목 순서로 대체할 예정 - 해결
유전 알고리즘 -> 사람간 신청 순서를 제외한 유일한 변인인 과목 순서의 최적화를 찾는 과정 필요함
apply 100% 성공률
선호 시간표 != 수강 신청 순서
